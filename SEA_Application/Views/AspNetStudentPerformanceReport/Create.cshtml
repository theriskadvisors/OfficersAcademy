@model SEA_Application.Models.AspNetStudentPerformanceReport

@{
    ViewBag.Title = "Create";
}

<script src="~/AdminLTE/selectone.js"></script>

<script>

  

    $(document).ready(function () {
        
        $("#ClassID").prop('required', true);
        $("#SubjectID").prop('required', true);
        $("#StudentID").prop('required', true);
        $("#Title").prop('required', true);
        $("#Description").prop('required', true);
        $("#LearningConcept").prop('required', true);
        $("#TimeManagement").prop('required', true);
        $("#Homework").prop('required', true);
        $("#ReadingSkills").prop('required', true);
        $("#InstructionFollowing").prop('required', true);
        $("#ProjectLines").prop('required', true);
        $("#Handwriting").prop('required', true);
        $("#PerformanceSkills").prop('required', true);
        $("#Punctuality").prop('required', true);
        $("#Regularity").prop('required', true);
        $("#Assessment").prop('required', true);

        $("#ClassID").change(function () {
            debugger;
            var selectedClass = $("#ClassID").val();

            $.ajax({
                type: "POST",
                cache: false,
                url: "/AspNetStudentPerformanceReport/GetSubjects?ClassID=" + selectedClass,
                processData: false,
                contentType: false,
                success: function (data) {
                    
                    var sch = JSON.parse(data);
                    var $el = $(".SubjectIdDDL");
                    $el.empty();
                    if (sch.length > 0) {
                        $el.append($("<option></option>")
                                     .attr("value", 0).text('Select Subject'));
                        for (i = 0; i < sch.length; i++) {
                            $el.append($("<option></option>")
                                    .attr("value", sch[i].Value).text(sch[i].Text));
                        }
                    }
                    else {
                        $el.append($("<option></option>")
                                   .attr("value", '').text('Select'));
                    }
                }
            });

            $.ajax({
                type: "POST",
                cache: false,
                url: "/AspNetStudentPerformanceReport/GetStudent?ClassID=" + selectedClass,
                processData: false,
                contentType: false,
                success: function (data) {
                    debugger;
                    var sch = JSON.parse(data);
                    debugger;
                    var $el = $(".StudentIdDDL");
                    $el.empty();
                    if (sch.length > 0) {
                        $el.append($("<option></option>")
                                     .attr("value", 0).text('Select Student'));
                        for (i = 0; i < sch.length; i++) {
                            $el.append($("<option></option>")
                                    .attr("value", sch[i].Value).text(sch[i].Text));
                        }
                    }
                    else {
                        $el.append($("<option></option>")
                                   .attr("value", '').text('Select'));
                    }
                }
            });




            $.get('@Url.Action("SubjectsByClass", "Teacher_Dashboard")',
                { id: selectedClass }, function (data) {

                    $('#SubjectID').html('');

                    $.each(data, function (i, item) {
                        $('#SubjectID').append('<option value=' + item.Id + '>' + item.SubjectName + '</option>');
                    });

                });
        });

        $("#SubjectID").click(function () {
            var selectedSubject = $("#SubjectID").val();
            $.get('@Url.Action("StudentBySubject", "AspNetStudentPerformanceReport")',
                { id: selectedSubject }, function (data) {

                    $('#StudentID').html('');

                    $.each(data, function (i, item) {
                        $('#StudentID').append('<option value=' + item.Id + '>' + item.Name + '</option>');
                    });

                });
        });

    });
</script>

<label>@Html.ActionLink("Home", "Dashboard", "Account") > @Html.ActionLink("Progress Report", "Index", "AspNetStudentPerformanceReport") > <b><a href="#">Create</a></b></label>
<h2>Create</h2>

<div class="box box-primary">
    <div class="box-body">

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <div class="form-horizontal">
                <h4>Add Progress Report</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    <label class="control-label col-md-1 col-lg-1">Select Class:</label>
                    <div class="col-md-10">
                        @Html.DropDownList("ClassID", null, htmlAttributes: new { @class = "form-control ClassID", @id = "ClassID" })
                    </div>
                </div>
                @*<div class="form-group">
                    <label class="control-label col-md-1 col-lg-1">Subject Name:</label>
                    <div class="col-md-10">
                        @Html.DropDownList("SubjectID", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.SubjectID, "", new { @class = "text-danger" })
                    </div>
                </div>*@
                <div class="form-group">
                    <label class="control-label col-md-1 col-lg-1">Subject Name:</label>
                    <div class="col-md-10">
                        <select class="form-control SubjectIdDDL" id="SubjectId" name="SubjectId"></select>
                    </div>
                </div>


                <div class="form-group">
                    <label class="control-label col-md-1 col-lg-1">Student Name:</label>
                    <div class="col-md-10">
                        <select class="form-control StudentIdDDL" id="StudentId" name="StudentId"></select>
                    </div>
                </div>
                @*<div class="form-group">
                    <label class="control-label col-md-1 col-lg-1">Student Name:</label>
                    <div class="col-md-10">
                        @Html.DropDownList("StudentID", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.StudentID, "", new { @class = "text-danger" })
                    </div>
                </div>*@

                <div class="form-group">
                    <label class="control-label col-md-1 col-lg-1">Title:</label>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-1 col-lg-1">Description:</label>
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                    </div>
                </div>



                <div class="form-group">
                    <label class="control-label col-md-1 col-lg-1">Learning Concept:</label>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.LearningConcept, new List<SelectListItem>

                 {
                    new SelectListItem{ Text="Very Good", Value = "Very Good" },
                    new SelectListItem{ Text="Satisfactory", Value = "Satisfactory" },
                    new SelectListItem{ Text="Need Improvement", Value = "Need Improvement" }
                 }, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.LearningConcept, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-1 col-lg-1">Time Management:</label>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.TimeManagement, new List<SelectListItem>

                 {
                    new SelectListItem{ Text="Very Good", Value = "Very Good" },
                    new SelectListItem{ Text="Satisfactory", Value = "Satisfactory" },
                    new SelectListItem{ Text="Need Improvement", Value = "Need Improvement" }
                 }, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TimeManagement, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-1 col-lg-1">Home Work:</label>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.Homework, new List<SelectListItem>

                 {
                    new SelectListItem{ Text="Very Good", Value = "Very Good" },
                    new SelectListItem{ Text="Satisfactory", Value = "Satisfactory" },
                    new SelectListItem{ Text="Need Improvement", Value = "Need Improvement" }
                 }, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Homework, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-1 col-lg-1">Reading Skills:</label>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.ReadingSkills, new List<SelectListItem>

                 {
                    new SelectListItem{ Text="Very Good", Value = "Very Good" },
                    new SelectListItem{ Text="Satisfactory", Value = "Satisfactory" },
                    new SelectListItem{ Text="Need Improvement", Value = "Need Improvement" }
                 }, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ReadingSkills, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-1 col-lg-1">Instruction Following:</label>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.InstructionFollowing, new List<SelectListItem>

                 {
                    new SelectListItem{ Text="Very Good", Value = "Very Good" },
                    new SelectListItem{ Text="Satisfactory", Value = "Satisfactory" },
                    new SelectListItem{ Text="Need Improvement", Value = "Need Improvement" }
                 }, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.InstructionFollowing, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">

                    <label class="control-label col-md-1 col-lg-1">Project Lines:</label>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.ProjectLines, new List<SelectListItem>

                 {
                    new SelectListItem{ Text="Very Good", Value = "Very Good" },
                    new SelectListItem{ Text="Satisfactory", Value = "Satisfactory" },
                    new SelectListItem{ Text="Need Improvement", Value = "Need Improvement" }
                 }, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.ProjectLines, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-1 col-lg-1">Hand Writing:</label>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.Handwriting, new List<SelectListItem>

                 {
                    new SelectListItem{ Text="Very Good", Value = "Very Good" },
                    new SelectListItem{ Text="Satisfactory", Value = "Satisfactory" },
                    new SelectListItem{ Text="Need Improvement", Value = "Need Improvement" }
                 }, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Handwriting, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-1 col-lg-1">Performance Skills:</label>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.PerformanceSkills, new List<SelectListItem>

                 {
                    new SelectListItem{ Text="Very Good", Value = "Very Good" },
                    new SelectListItem{ Text="Satisfactory", Value = "Satisfactory" },
                    new SelectListItem{ Text="Need Improvement", Value = "Need Improvement" }
                 }, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.PerformanceSkills, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-1 col-lg-1">Punctuality:</label>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.Punctuality, new List<SelectListItem>

                 {
                    new SelectListItem{ Text="Very Good", Value = "Very Good" },
                    new SelectListItem{ Text="Satisfactory", Value = "Satisfactory" },
                    new SelectListItem{ Text="Need Improvement", Value = "Need Improvement" }
                 }, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Punctuality, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-1 col-lg-1">Regularity:</label>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.Regularity, new List<SelectListItem>

                 {
                    new SelectListItem{ Text="Very Good", Value = "Very Good" },
                    new SelectListItem{ Text="Satisfactory", Value = "Satisfactory" },
                    new SelectListItem{ Text="Need Improvement", Value = "Need Improvement" }
                 }, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Regularity, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <label class="control-label col-md-1 col-lg-1">Assessment:</label>
                    <div class="col-md-10">
                        @Html.DropDownListFor(model => model.Assessment, new List<SelectListItem>

                 {
                    new SelectListItem{ Text="Very Good", Value = "Very Good" },
                    new SelectListItem{ Text="Satisfactory", Value = "Satisfactory" },
                    new SelectListItem{ Text="Need Improvement", Value = "Need Improvement" }
                 }, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.Assessment, "", new { @class = "text-danger" })
                    </div>
                </div>
                <hr />
                <div class="form-group">
                    <div class="col-md-offset-1 col-lg-offset-1 col-md-2">
                        <input type="submit" value="Create" class="btn btn-primary" />
                        <button class="btn btn-default" onclick="window.location.href = 'Index'">Cancle</button>
                    </div>
                </div>
            </div>

              
        }
    </div>
</div>
